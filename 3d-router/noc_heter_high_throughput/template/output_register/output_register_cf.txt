-------------------------------------------------------------------------------
-- Title      : Output register for the link with cf
-- Project    : 
-------------------------------------------------------------------------------
-- File       : output_register_cf.vhd
-- Author     : Studi-IDS-103  <s_ids103@item0108.item.uni-bremen.de>
-- Company    : 
-- Created    : 2019-05-09
-- Last update: 2019-05-09
-- Platform   : 
-- Standard   : VHDL'87
-------------------------------------------------------------------------------
-- Description: 
-------------------------------------------------------------------------------
-- Copyright (c) 2019 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2019-05-09  1.0      s_ids103        Created
-------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_misc.all;
use ieee.std_logic_misc.all;
use work.NOC_3D_PACKAGE.all;

entity output_register_cf is
  generic(
    cf         : positive := $cf;         -- clock factor
    vc_num     : positive := $max_vc_num;         -- Number of VCs in the according
    -- input buffer
    vc_num_out : positive := $max_vc_num_out);        -- Number of VC in the input buffer at
  -- the other side of the link
  port(
    clk, rst       : in  std_logic;
    data_tx        : in  std_logic_vector(cf*flit_size-1 downto 0);
    vc_write_tx    : in  std_logic_vector(
      vc_num_out-1 downto 0);
    incr_tx        : in  std_logic_vector(vc_num-1 downto 0);
    data_tx_pl     : out std_logic_vector(cf*flit_size-1 downto 0);
    vc_write_tx_pl : out std_logic_vector(vc_num_out-1 downto 0);
    incr_tx_pl     : out std_logic_vector(vc_num-1 downto 0)
    );
end output_register_cf;

architecture rtl of output_register_cf is
begin
-- Flip-Flops enabled by req-transfer to reduce the switching activity
  process(clk, rst)
  begin
    if rst = RST_LVL then
      data_tx_pl     <= (others => '0');
      vc_write_tx_pl <= (others => '0');
      incr_tx_pl     <= (others => '0');
    elsif rising_edge(clk) then
      if or_reduce(vc_write_tx) = '1' then
        data_tx_pl <= data_tx;
      end if;
      incr_tx_pl     <= incr_tx;
      vc_write_tx_pl <= vc_write_tx;
    end if;
  end process;

end rtl;


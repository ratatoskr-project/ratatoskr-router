#!/usr/bin/python
#title			:func.py
#description	:function and templates for full NoC
#author			:Behnam Razi Perjikolaei
#date			:20190604
#version		:1
#usage			:python func.py
#notes			:
#python_version	:3
#==============================================================================

import subprocess
import itertools
import string
import numpy as np
from string import Template
#########################################################################################
#	Full_noc entity template
#	Includes clk and rst and router local ports
#	Number of local ports is calculated by multiplication of noc size (x,y,z) in $router_num
#########################################################################################
entity = Template(
"""
-------------------------------------------------------------------------------
-- Title      : Full Noc with packet injector
--              Automatically generated by full_noc_generator.py
-- Project    : 
-------------------------------------------------------------------------------
-- File       : full_noc.vhd
-- Author     : Behnam Razi Perjikolaei  <raziperj@uni-bremen.de>
-- Company    : 
-- Created    : 2019-06-17
-- Last update: 
-- Platform   : 
-- Standard   : VHDL'87
-------------------------------------------------------------------------------
-- Description: 
-------------------------------------------------------------------------------
-- Copyright (c) 2019 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2019-05-29  1.0      behnam  Created
-------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use IEEE.math_real.all;
USE ieee.numeric_std.ALL;
use work.NOC_3D_PACKAGE.all;

entity full_noc is

port(
  clk, rst          : in  std_logic;
  local_rx          : in  flit_vector($router_num-1 downto 0);
  local_vc_write_rx : in  std_logic_vector($io_sig_num-1 downto 0);
  local_incr_rx_vec : in  std_logic_vector($io_sig_num-1 downto 0);
  local_tx          : out flit_vector($router_num-1 downto 0);
  local_vc_write_tx : out std_logic_vector($io_sig_num-1 downto 0);
  local_incr_tx_vec : out std_logic_vector($io_sig_num-1 downto 0)
  );
end entity full_noc;
""")
#########################################################################################
#	Full_noc top of the architecture template and
#	Defining interconnection signals data, credit increment (incr) and vc_write
#########################################################################################
archi_top = Template("""
architecture structural of full_noc is
  type flit_vector_array is array (0 to $noc_z) of flit_vector(max_port_num-1 downto 0);
  type flit_vector_2D_array is array (0 to $noc_y) of flit_vector_array;
  type flit_vector_3D_array is array (0 to $noc_x) of flit_vector_2D_array;

  subtype incr_per_port is std_logic_vector($vc_num-1 downto 0);
  type incr_per_router is array (max_port_num-1 downto 0) of incr_per_port;
  type incr_array is array (0 to $noc_z) of incr_per_router;
  type incr_2D_array is array (0 to $noc_y) of incr_array;
  type incr_3D_array is array (0 to $noc_x) of incr_2D_array;


  signal inter_data_in      : flit_vector_3D_array;
  signal inter_data_out     : flit_vector_3D_array;
  signal inter_incr_in      : incr_3D_array;
  signal inter_incr_out     : incr_3D_array;
  signal inter_vc_write_in  : incr_3D_array;
  signal inter_vc_write_out : incr_3D_array;
""")
#########################################################################################
#	Router generic map template
######################################################################################### 
router_generic = Template("""
--------------------------------------------------------------------------
-- Router at x= $Xis y=$Yis z=$Zis
--------------------------------------------------------------------------
router_$Xis$Yis$Zis: entity work.router_pl
  generic map (
	port_num 			=> $port_num,
	Xis	 			=> $Xis,
	Yis	 			=> $Yis,
	Zis	 			=> $Zis,
	header_incl_in_packet_length	=> true,
	port_exist			=> $port_exist,
	vc_num_vec			=> $vc_num_vec,
	vc_num_out_vec			=> $vc_num_out_vec,
	vc_depth_array			=> $vc_depth_array,
	vc_depth_out_array		=> $vc_depth_out_array,
	rout_algo			=> $rout_algo
	)""")
#########################################################################################
#########################################################################################
data_in_tmp=Template("""  signal data_in$x$y$z, data_out$x$y$z: flit_vector($port_num-1 downto 0);
""")
vc_write_rx_vec_tmp=Template("""  signal vc_write_rx_vec$x$y$z: std_logic_vector($sum_vc-1 downto 0);
""")
incr_rx_vec_tmp=Template("""  signal incr_rx_vec$x$y$z:  std_logic_vector($sum_vc-1 downto 0);
""")
vc_write_tx_pl_vec_tmp=Template("""  signal vc_write_tx_pl_vec$x$y$z:  std_logic_vector($sum_vc-1 downto 0);
""")
incr_tx_pl_vec_tmp=Template("""  signal incr_tx_pl_vec$x$y$z: std_logic_vector($sum_vc-1 downto 0);
""")
#########################################################################################
#	Router port map template
######################################################################################### 
router_port = Template("""
  port map (
	clk 			=> clk,
	rst 			=> rst,
	data_rx	 		=> data_in$Xis$Yis$Zis,
	vc_write_rx_vec		=> vc_write_rx_vec$Xis$Yis$Zis,
	incr_rx_vec		=> incr_rx_vec$Xis$Yis$Zis,
	data_tx_pl		=> data_out$Xis$Yis$Zis,
	vc_write_tx_pl_vec	=> vc_write_tx_pl_vec$Xis$Yis$Zis,
	incr_tx_pl_vec		=> incr_tx_pl_vec$Xis$Yis$Zis
	);
--------------------------------------------------------------------------
-- Router port connections to adjacent routers
--------------------------------------------------------------------------
""")
#########################################################################################
#	inter_data connection templates
######################################################################################### 
inter_data_local= Template("""
inter_data_in($Xis)($Yis)($Zis)(0) <= local_rx($i);
local_tx($i)	          <= inter_data_out($Xis)($Yis)($Zis)(0);
""")
inter_data_in_1=Template("""
inter_data_in($x)($y)($z)(1) <= inter_data_out($x)($y+1)($z)(3);
""")
inter_data_in_2=Template("""
inter_data_in($x)($y)($z)(2) <= inter_data_out($x+1)($y)($z)(4);
""")
inter_data_in_3=Template("""
inter_data_in($x)($y)($z)(3) <= inter_data_out($x)($y-1)($z)(1);
""")
inter_data_in_4=Template("""
inter_data_in($x)($y)($z)(4) <= inter_data_out($x-1)($y)($z)(2);
""")
inter_data_in_5=Template("""
inter_data_in($x)($y)($z)(5) <= inter_data_out($x)($y)($z+1)(6);
""")
inter_data_in_6=Template("""
inter_data_in($x)($y)($z)(6) <= inter_data_out($x)($y)($z-1)(5);
""")
data_rx_str_tmp=Template("""&inter_data_in($x)($y)($z)($i)""")
data_tx_str_tmp=Template("""&inter_data_out($x)($y)($z)($i)""")
data_rx_str_tmp0=Template("""inter_data_in($x)($y)($z)(0)""")
data_tx_str_tmp0=Template("""inter_data_out($x)($y)($z)(0)""")
inter_data2data_in=Template("""data_in$x$y$z($pos) <= inter_data_in($x)($y)($z)($i);
""")
data_out2inter_data=Template("""inter_data_out($x)($y)($z)($i) <= data_out$x$y$z($pos);
""")
#########################################################################################
inter_incr_local=Template("""
inter_incr_in($Xis)($Yis)($Zis)(0)($vc_num-1 downto 0) <= local_incr_rx_vec($io_sig_ub-1 downto $io_sig_lb);
local_incr_tx_vec($io_sig_ub-1 downto $io_sig_lb) <= inter_incr_out($Xis)($Yis)($Zis)(0)($vc_num-1 downto 0);
""")
inter_incr_in_1=Template("""
inter_incr_in($x)($y)($z)(1) <= inter_incr_out($x)($y+1)($z)(3);
""")
inter_incr_in_2=Template("""
inter_incr_in($x)($y)($z)(2) <= inter_incr_out($x+1)($y)($z)(4);
""")
inter_incr_in_3=Template("""
inter_incr_in($x)($y)($z)(3) <= inter_incr_out($x)($y-1)($z)(1);
""")
inter_incr_in_4=Template("""
inter_incr_in($x)($y)($z)(4) <= inter_incr_out($x-1)($y)($z)(2);
""")
inter_incr_in_5=Template("""
inter_incr_in($x)($y)($z)(5) <= inter_incr_out($x)($y)($z+1)(6);
""")
inter_incr_in_6=Template("""
inter_incr_in($x)($y)($z)(6) <= inter_incr_out($x)($y)($z-1)(5);
""")
inter_incr2incr_in=Template("""incr_rx_vec$x$y$z($vc_ub-1 downto $vc_lb) <= inter_incr_in($x)($y)($z)($i)($vc_num-1 downto 0);
""")
incr_out2inter_incr=Template("""inter_incr_out($x)($y)($z)($i)($vc_num-1 downto 0) <= incr_tx_pl_vec$x$y$z($vc_ub-1 downto $vc_lb);
""")
incr_rx_str_tmp0=Template("""inter_data_in($x)($y)($z)(0)""")
incr_tx_str_tmp0=Template("""inter_data_out($x)($y)($z)(0)""")
#########################################################################################
inter_vc_write_local=Template("""
inter_vc_write_in($Xis)($Yis)($Zis)(0)($vc_num-1 downto 0) <= local_vc_write_rx($io_sig_ub-1 downto $io_sig_lb);
local_vc_write_tx($io_sig_ub-1 downto $io_sig_lb) <= inter_vc_write_out($Xis)($Yis)($Zis)(0)($vc_num-1 downto 0);
""")
inter_vc_write_in_1=Template("""
inter_vc_write_in($x)($y)($z)(1) <= inter_vc_write_out($x)($y+1)($z)(3);
""")
inter_vc_write_in_2=Template("""
inter_vc_write_in($x)($y)($z)(2) <= inter_vc_write_out($x+1)($y)($z)(4);
""")
inter_vc_write_in_3=Template("""
inter_vc_write_in($x)($y)($z)(3) <= inter_vc_write_out($x)($y-1)($z)(1);
""")
inter_vc_write_in_4=Template("""
inter_vc_write_in($x)($y)($z)(4) <= inter_vc_write_out($x-1)($y)($z)(2);
""")
inter_vc_write_in_5=Template("""
inter_vc_write_in($x)($y)($z)(5) <= inter_vc_write_out($x)($y)($z+1)(6);
""")
inter_vc_write_in_6=Template("""
inter_vc_write_in($x)($y)($z)(6) <= inter_vc_write_out($x)($y)($z-1)(5);
""")
inter_vc_write2vc_write_in=Template("""vc_write_rx_vec$x$y$z($vc_ub-1 downto $vc_lb) <= inter_vc_write_in($x)($y)($z)($i)($vc_num-1 downto 0);
""")
vc_write_out2inter_vc_write=Template("""inter_vc_write_out($x)($y)($z)($i)($vc_num-1 downto 0) <= vc_write_tx_pl_vec$x$y$z($vc_ub-1 downto $vc_lb);
""")
#########################################################################################
out_file='full_noc.vhd'

#########################################################################################
# code for writing each router scripts
#########################################################################################
 
def ftwrite_router(x,y,z,noc_x, noc_y, noc_z, vc_xy, vc_z, vc_num, depth_xy, depth_z, rout_algo):
  ft=open(out_file, "a")
  port_num = 7
  pos=0
  io_sig_lb=ret_io_sig_lb(x=x,y=y,z=z,noc_x=noc_x,noc_y=noc_y,noc_z=noc_z,vc_xy=vc_xy)
  io_sig_ub=io_sig_lb+vc_xy[z]
  vc_lb=0
  vc_ub=vc_xy[z]
  port_exist="(0"			# Local port exist (always)
  vc_num_vec="("+str(vc_xy[z])
  vc_num_out_vec="("+str(vc_xy[z])
  vc_depth="("
  for i in range(vc_xy[z]):
    if i == 0 :
      vc_depth=vc_depth+str(depth_xy[z])
    else:
      vc_depth=vc_depth+", "+str(depth_xy[z])
  vc_depth+=")"
  vc_depth_array="("+vc_depth
  
  vc_depth_out="("
  for i in range(vc_xy[z]):
    if i == 0 :
      vc_depth_out+=str(depth_xy[z])
    else:
      vc_depth_out=vc_depth_out+", "+str(depth_xy[z])
  vc_depth_out+=")"
  vc_depth_out_array="("+vc_depth_out
  
  port_exist_int=np.full(7, np.nan)
  port_exist_int[pos]=0
  data_rx_str=data_rx_str_tmp0.substitute(x=str(x),y=str(y),z=str(z))
  data_tx_str=data_tx_str_tmp0.substitute(x=str(x),y=str(y),z=str(z))
  ft.write(inter_data2data_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='0'))
  ft.write(data_out2inter_data.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='0'))
  ft.write(inter_incr2incr_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='0',vc_num=vc_xy[z],vc_ub= vc_ub,vc_lb= vc_lb))
  ft.write(incr_out2inter_incr.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='0',vc_num=vc_xy[z],vc_ub= vc_ub,vc_lb= vc_lb))
  ft.write(inter_vc_write2vc_write_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='0',vc_num=vc_xy[z],vc_ub= vc_ub,vc_lb= vc_lb))
  ft.write(vc_write_out2inter_vc_write.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='0',vc_num=vc_xy[z],vc_ub= vc_ub,vc_lb= vc_lb))
  pos+=1
  if (y == noc_y-1)	:
    port_num -=1	# Max Y, North port doesn't exist
  else :
    port_exist+=",1"		# North port exist
    port_exist_int[pos]=1
    vc_lb=vc_ub
    vc_ub=vc_lb+vc_xy[z]
    vc_num_vec=vc_num_vec+", "+str(vc_xy[z])
    vc_num_out_vec=vc_num_out_vec+", "+str(vc_xy[z])
    vc_depth="("
    for i in range(vc_xy[z]):
      if i == 0 :
        vc_depth=vc_depth+str(depth_xy[z])
      else:
        vc_depth=vc_depth+", "+str(depth_xy[z])
    vc_depth+=")"
    vc_depth_array=vc_depth_array+", "+vc_depth

    vc_depth_out="("
    for i in range(vc_xy[z]):
      if i == 0 :
        vc_depth_out+=str(depth_xy[z])
      else:
        vc_depth_out=vc_depth_out+", "+str(depth_xy[z])
    vc_depth_out+=")"
    vc_depth_out_array=vc_depth_out_array+", "+vc_depth_out
    ft.write(inter_data2data_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='1'))
    ft.write(data_out2inter_data.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='1'))
    ft.write(inter_incr2incr_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='1',vc_num=vc_xy[z],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(incr_out2inter_incr.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='1',vc_num=vc_xy[z],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(inter_vc_write2vc_write_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='1',vc_num=vc_xy[z],vc_ub= vc_ub,vc_lb= vc_lb))
    ft.write(vc_write_out2inter_vc_write.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='1',vc_num=vc_xy[z],vc_ub= vc_ub,vc_lb= vc_lb))
    ft.write(inter_data_in_1.substitute(x=str(x),y=str(y),z=str(z)))
    ft.write(inter_incr_in_1.substitute(x=str(x),y=str(y),z=str(z)))
    ft.write(inter_vc_write_in_1.substitute(x=str(x),y=str(y),z=str(z)))
    data_rx_str+=data_rx_str_tmp.substitute(x=str(x),y=str(y),z=str(z),i='1')
    data_tx_str+=data_tx_str_tmp.substitute(x=str(x),y=str(y),z=str(z),i='1')
    pos+=1
  if (x == noc_x-1) :
    port_num -=1	# Max X, East port doesn't exist
  else :
    port_exist+=",2"		# East port exist
    port_exist_int[pos]=2
    vc_lb=vc_ub
    vc_ub=vc_lb+vc_xy[z]
    vc_num_vec=vc_num_vec+", "+str(vc_xy[z])
    vc_num_out_vec=vc_num_out_vec+", "+str(vc_xy[z])
    vc_depth="("
    for i in range(vc_xy[z]):
      if i == 0 :
        vc_depth=vc_depth+str(depth_xy[z])
      else:
        vc_depth=vc_depth+", "+str(depth_xy[z])
    vc_depth+=")"
    vc_depth_array=vc_depth_array+", "+vc_depth

    vc_depth_out="("
    for i in range(vc_xy[z]):
      if i == 0 :
        vc_depth_out+=str(depth_xy[z])
      else:
        vc_depth_out=vc_depth_out+", "+str(depth_xy[z])
    vc_depth_out+=")"
    vc_depth_out_array=vc_depth_out_array+", "+vc_depth_out
    ft.write(inter_data2data_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='2'))
    ft.write(data_out2inter_data.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='2'))
    ft.write(inter_incr2incr_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='2',vc_num=vc_xy[z],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(incr_out2inter_incr.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='2',vc_num=vc_xy[z],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(inter_vc_write2vc_write_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='2',vc_num=vc_xy[z],vc_ub= vc_ub,vc_lb= vc_lb))
    ft.write(vc_write_out2inter_vc_write.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='2',vc_num=vc_xy[z],vc_ub= vc_ub,vc_lb= vc_lb))
    ft.write(inter_data_in_2.substitute(x=str(x),y=str(y),z=str(z)))
    ft.write(inter_incr_in_2.substitute(x=str(x),y=str(y),z=str(z)))
    ft.write(inter_vc_write_in_2.substitute(x=str(x),y=str(y),z=str(z)))
    data_rx_str+=data_rx_str_tmp.substitute(x=str(x),y=str(y),z=str(z),i='2')
    data_tx_str+=data_tx_str_tmp.substitute(x=str(x),y=str(y),z=str(z),i='2')
    pos+=1
  if (y == 0)	:
    port_num -=1	# Min Y, South port doesn't exist
  else :
    port_exist+=",3"		# South port exist
    port_exist_int[pos]=3
    vc_lb=vc_ub
    vc_ub=vc_lb+vc_xy[z]
    vc_num_vec=vc_num_vec+", "+str(vc_xy[z])
    vc_num_out_vec=vc_num_out_vec+", "+str(vc_xy[z])
    vc_depth="("
    for i in range(vc_xy[z]):
      if i == 0 :
        vc_depth=vc_depth+str(depth_xy[z])
      else:
        vc_depth=vc_depth+", "+str(depth_xy[z])
    vc_depth+=")"
    vc_depth_array=vc_depth_array+", "+vc_depth

    vc_depth_out="("
    for i in range(vc_xy[z]):
      if i == 0 :
        vc_depth_out+=str(depth_xy[z])
      else:
        vc_depth_out=vc_depth_out+", "+str(depth_xy[z])
    vc_depth_out+=")"
    vc_depth_out_array=vc_depth_out_array+", "+vc_depth_out
    ft.write(inter_data2data_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='3'))
    ft.write(data_out2inter_data.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='3'))
    ft.write(inter_incr2incr_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='3',vc_num=vc_xy[z],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(incr_out2inter_incr.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='3',vc_num=vc_xy[z],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(inter_vc_write2vc_write_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='3',vc_num=vc_xy[z],vc_ub= vc_ub,vc_lb= vc_lb))
    ft.write(vc_write_out2inter_vc_write.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='3',vc_num=vc_xy[z],vc_ub= vc_ub,vc_lb= vc_lb))
    ft.write(inter_data_in_3.substitute(x=str(x),y=str(y),z=str(z)))
    ft.write(inter_incr_in_3.substitute(x=str(x),y=str(y),z=str(z)))
    ft.write(inter_vc_write_in_3.substitute(x=str(x),y=str(y),z=str(z)))
    data_rx_str+=data_rx_str_tmp.substitute(x=str(x),y=str(y),z=str(z),i='3')
    data_tx_str+=data_tx_str_tmp.substitute(x=str(x),y=str(y),z=str(z),i='3')
    pos+=1
  if (x == 0)	:
    port_num -=1	# Min X, West port doesn't exist
  else :
    port_exist+=",4"		# West port exist
    port_exist_int[pos]=4
    vc_lb=vc_ub
    vc_ub=vc_lb+vc_xy[z]
    vc_num_vec=vc_num_vec+", "+str(vc_xy[z])
    vc_num_out_vec=vc_num_out_vec+", "+str(vc_xy[z])
    vc_depth="("
    for i in range(vc_xy[z]):
      if i == 0 :
        vc_depth=vc_depth+str(depth_xy[z])
      else:
        vc_depth=vc_depth+", "+str(depth_xy[z])
    vc_depth+=")"
    vc_depth_array=vc_depth_array+", "+vc_depth

    vc_depth_out="("
    for i in range(vc_xy[z]):
      if i == 0 :
        vc_depth_out+=str(depth_xy[z])
      else:
        vc_depth_out=vc_depth_out+", "+str(depth_xy[z])
    vc_depth_out+=")"
    vc_depth_out_array=vc_depth_out_array+", "+vc_depth_out
    ft.write(inter_data2data_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='4'))
    ft.write(data_out2inter_data.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='4'))
    ft.write(inter_incr2incr_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='4',vc_num=vc_xy[z],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(incr_out2inter_incr.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='4',vc_num=vc_xy[z],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(inter_vc_write2vc_write_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='4',vc_num=vc_xy[z],vc_ub= vc_ub,vc_lb= vc_lb))
    ft.write(vc_write_out2inter_vc_write.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='4',vc_num=vc_xy[z],vc_ub= vc_ub,vc_lb= vc_lb))
    ft.write(inter_data_in_4.substitute(x=str(x),y=str(y),z=str(z)))
    ft.write(inter_incr_in_4.substitute(x=str(x),y=str(y),z=str(z)))
    ft.write(inter_vc_write_in_4.substitute(x=str(x),y=str(y),z=str(z)))
    data_rx_str+=data_rx_str_tmp.substitute(x=str(x),y=str(y),z=str(z),i='4')
    data_tx_str+=data_tx_str_tmp.substitute(x=str(x),y=str(y),z=str(z),i='4')
    pos+=1
  if (z == noc_z-1)	:
    port_num -=1	# Max Z, Up port doesn't exist  
  else :
    port_exist+=",5"		# Up port exist
    port_exist_int[pos]=5
    vc_lb=vc_ub
    vc_ub=vc_lb+vc_z[z]
    vc_num_vec=vc_num_vec+", "+str(vc_z[z])
    vc_num_out_vec=vc_num_out_vec+", "+str(vc_z[z])
    vc_depth="("
    for i in range(vc_z[z]):
      if i == 0 :
        vc_depth=vc_depth+str(depth_z[z])
      else:
        vc_depth=vc_depth+", "+str(depth_z[z])
    vc_depth+=")"
    vc_depth_array=vc_depth_array+", "+vc_depth

    vc_depth_out="("
    for i in range(vc_z[z]):
      if i == 0 :
        vc_depth_out+=str(depth_z[z])
      else:
        vc_depth_out=vc_depth_out+", "+str(depth_z[z])
    vc_depth_out+=")"
    vc_depth_out_array=vc_depth_out_array+", "+vc_depth_out
    ft.write(inter_data2data_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='5'))
    ft.write(data_out2inter_data.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='5'))
    ft.write(inter_incr2incr_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='5',vc_num=vc_z[z],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(incr_out2inter_incr.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='5',vc_num=vc_z[z],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(inter_vc_write2vc_write_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='5',vc_num=vc_z[z],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(vc_write_out2inter_vc_write.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='5',vc_num=vc_z[z],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(inter_data_in_5.substitute(x=str(x),y=str(y),z=str(z)))
    ft.write(inter_incr_in_5.substitute(x=str(x),y=str(y),z=str(z)))
    ft.write(inter_vc_write_in_5.substitute(x=str(x),y=str(y),z=str(z)))
    data_rx_str+=data_rx_str_tmp.substitute(x=str(x),y=str(y),z=str(z),i='5')
    data_tx_str+=data_tx_str_tmp.substitute(x=str(x),y=str(y),z=str(z),i='5')
    pos+=1
  if (z == 0)	:
    port_num -=1	# Min Z, Down port doesn't exist
  else :
    port_exist+=",6"		# Down port exist
    port_exist_int[pos]=6
    vc_lb=vc_ub
    vc_ub=vc_lb+vc_z[z-1]
    vc_num_vec=vc_num_vec+", "+str(vc_z[z-1])
    vc_num_out_vec=vc_num_out_vec+", "+str(vc_z[z-1])
    vc_depth="("
    for i in range(vc_z[z-1]):
      if i == 0 :
        vc_depth=vc_depth+str(depth_z[z-1])
      else:
        vc_depth=vc_depth+", "+str(depth_z[z-1])
    vc_depth+=")"
    vc_depth_array=vc_depth_array+", "+vc_depth

    vc_depth_out="("
    for i in range(vc_z[z-1]):
      if i == 0 :
        vc_depth_out+=str(depth_z[z-1])
      else:
        vc_depth_out=vc_depth_out+", "+str(depth_z[z-1])
    vc_depth_out+=")"
    vc_depth_out_array=vc_depth_out_array+", "+vc_depth_out
    ft.write(inter_data2data_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='6'))
    ft.write(data_out2inter_data.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='6'))
    ft.write(inter_incr2incr_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='6',vc_num=vc_z[z-1],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(incr_out2inter_incr.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='6',vc_num=vc_z[z-1],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(inter_vc_write2vc_write_in.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='6',vc_num=vc_z[z-1],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(vc_write_out2inter_vc_write.substitute(x=str(x),y=str(y),z=str(z),pos=str(pos),i='6',vc_num=vc_z[z-1],vc_ub=vc_ub,vc_lb=vc_lb))
    ft.write(inter_data_in_6.substitute(x=str(x),y=str(y),z=str(z)))
    ft.write(inter_incr_in_6.substitute(x=str(x),y=str(y),z=str(z)))
    ft.write(inter_vc_write_in_6.substitute(x=str(x),y=str(y),z=str(z)))
    data_rx_str+=data_rx_str_tmp.substitute(x=str(x),y=str(y),z=str(z),i='6')
    data_tx_str+=data_tx_str_tmp.substitute(x=str(x),y=str(y),z=str(z),i='6')
  port_exist+=")"			# End of port_exist string
  vc_num_vec+=")"
  vc_num_out_vec+=")"
  vc_depth_array+=")"
  vc_depth_out_array+=")"
#########################################################################################
  ft.write(inter_data_local.substitute(Xis=str(x),Yis=str(y),Zis=str(z),i=str(x+(y*noc_x)+(z*noc_x*noc_y)) ))
  ft.write(inter_incr_local.substitute(Xis=str(x),Yis=str(y),Zis=str(z),io_sig_ub=str(io_sig_ub), io_sig_lb=str(io_sig_lb), vc_num=vc_xy[z]))
  ft.write(inter_vc_write_local.substitute(Xis=str(x),Yis=str(y),Zis=str(z),io_sig_ub=str(io_sig_ub), io_sig_lb=str(io_sig_lb), vc_num=vc_xy[z]))
  ft.write(router_generic.substitute(
					port_num= str(port_num),
					Xis= str(x),
					Yis= str(y),
					Zis= str(z),
					port_exist= port_exist,
					vc_num_vec= vc_num_vec,
					vc_num_out_vec= vc_num_out_vec,
					vc_depth_array= vc_depth_array,
					vc_depth_out_array= vc_depth_out_array,
                                        rout_algo= rout_algo
					))
  ft.write(router_port.substitute(
					#port_num=str(port_num),
					Xis=str(x),
					Yis=str(y),
					Zis=str(z)
					))

  ft.close() 

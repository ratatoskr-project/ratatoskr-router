-------------------------------------------------------------------------------
-- Title      : Input buffer to be used in vertical ports for high throughput router 
-- Project    : 
-------------------------------------------------------------------------------
-- File       : vc_input_buffer_cf.vhd
-- Author     : Studi-IDS-103  <s_ids103@item0108.item.uni-bremen.de>
-- Company    : 
-- Created    : 2019-05-09
-- Last update: 2019-05-09
-- Platform   : 
-- Standard   : VHDL'87
-------------------------------------------------------------------------------
-- Description: This router supports multiple inputs which are connected to shift_in_reg
-- registers and also support parallel or single reading from the buffers 
-------------------------------------------------------------------------------
-- Copyright (c) 2019 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2019-05-09  1.0      s_ids103        Created
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use IEEE.math_real.all;
use ieee.numeric_std.all;
use IEEE.STD_LOGIC_MISC.all;
use work.NOC_3D_PACKAGE.all;
------------------------------------------------------------------------------------------

entity vc_input_buffer_cf is

  generic (vc_num   : integer     := $max_vc_num;
           cf       : positive    := $cf;
           vc_depth : integer_vec := $max_vc_depth
           );

  port (clk             : in  std_logic;
        rst             : in  std_logic;
        data_rx         : in  std_logic_vector(vc_num*cf*flit_size-1 downto 0);
        vc_write_rx     : in  std_logic_vector(vc_num-1 downto 0);
        vc_transfer_sgl : in  std_logic_vector(vc_num-1 downto 0);
        vc_transfer_par : in  std_logic_vector(vc_num-1 downto 0);
        valid_data_vc   : out std_logic_vector(vc_num-1 downto 0);
        data_transfer   : out std_logic_vector(cf*flit_size-1 downto 0);
        header          : out header_inf_vector(vc_num-1 downto 0)
        );

end vc_input_buffer_cf;

------------------------------------------------------------------------------------------

architecture str of vc_input_buffer_cf is

  ----------------------------------------------------------------------------------------
  -- Internal signal declarations
  ----------------------------------------------------------------------------------------
  signal enr_vector     : std_logic_vector(vc_num-1 downto 0);  -- enable read signal for
                                        -- each channel (No. channels
                                        -- of selected port)
  signal enr_par_vector : std_logic_vector(vc_num-1 downto 0);
  type   buffer_vector is array (natural range <>) of
    std_logic_vector((cf*flit_size)-1 downto 0);  -- defining a new type (a vector in the
  signal buffer_out_vector : buffer_vector(vc_num-1 downto 0);
  signal buffer_in_vector  : buffer_vector(vc_num-1 downto 0);
  ----------------------------------------------------------------------------------------
  -- Component declarations
  ----------------------------------------------------------------------------------------

begin  -- str
  BUFF_IN_GEN : for i in 0 to vc_num-1 generate
    buffer_in_vector(i) <= data_rx((i+1)*cf*flit_size-1 downto i*cf*flit_size);
  end generate;
  ----------------------------------------------------------------------------------------
  -- Component instantiations
  ----------------------------------------------------------------------------------------
  biffer_gen : for i in 0 to vc_num-1 generate
    fifo_i : entity work.fifo_par_support
      generic map (
        buff_depth => vc_depth(i),
        N          => flit_size,
        cf         => cf)
      port map (
        data_in        => buffer_in_vector(i),
        write_par_en   => vc_write_rx(i),
        read_en        => vc_transfer_sgl(i),
        read_par_en    => vc_transfer_par(i),
        clk            => clk,
        rst            => rst,
        data_out       => buffer_out_vector(i),
        valid_data     => valid_data_vc(i),
        valid_data_par => open);
  end generate biffer_gen;

  OUTPUT_MUX : if vc_num > 1 generate
    process(buffer_out_vector, vc_transfer_sgl, vc_transfer_par)
    begin
      data_transfer <= (others => '-');
      if or_reduce(vc_transfer_sgl) = '1' then
        data_transfer <= buffer_out_vector(one_hot2int(vc_transfer_sgl));
      elsif or_reduce(vc_transfer_par) = '1' then
        data_transfer <= buffer_out_vector(one_hot2int(vc_transfer_par));
      end if;
    end process;
  end generate;

  OUTPUT_PASS : if vc_num = 1 generate
    data_transfer <= buffer_out_vector(0);
  end generate;

  HEADER_GEN : for i in 0 to vc_num-1 generate
    header(i) <= get_header_inf(buffer_out_vector(i));
  end generate;
  
end str;

------------------------------------------------------------------------------------------

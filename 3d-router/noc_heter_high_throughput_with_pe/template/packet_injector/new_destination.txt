-------------------------------------------------------------------------------
-- Title      : make new destination for header packet
-- Project    : 
-------------------------------------------------------------------------------
-- File       : new_destination.vhd
-- Author     : Behnam Razi Perjikolaei  <raziperj@uni-bremen.de>
-- Company    : 
-- Created    : 2019-06-19
-- Last update: 2019-06-19
-- Platform   : 
-- Standard   : VHDL'87
-------------------------------------------------------------------------------
-- Description: 
-------------------------------------------------------------------------------
-- Copyright (c) 2019 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2019-06-19  1.0      behnam  Created
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.math_real.all;
use ieee.numeric_std.all;
use work.NOC_3D_PACKAGE.all;
------------------------------------------------------------------------------------------

entity new_destination is

  generic (Xis        : natural     := 1;            -- Location of router on X axis
           Yis        : natural     := 1;            -- Location of router on Y axis
           Zis        : natural     := 1;            -- Location of router on Z axis
           layer_prob : integer_vec := $layer_prob  -- Possibility of sending data to the
                                                     -- nodes of each lay
           );

  port (en        : in  std_logic;
        dest_addr : out address_inf
        );

end new_destination;

------------------------------------------------------------------------------------------

architecture str of new_destination is

  signal dest_addr_sig : address_inf;
begin  -- str

  ADDRESS_GEN_PROC : process(en)
    variable seed1, seed2                       : positive;
    variable x_rand, y_rand, z_rand             : real;
    variable x_range                            : real := real(max_x_dim);
    variable y_range                            : real := real(max_y_dim);
    variable z_range                            : real := 100.0;
    variable z_prob_min, z_prob_max             : integer range 0 to 100;
    variable x_rand_num, y_rand_num, z_rand_num : integer range 0 to 100;
  begin
    if en = '1' then
      uniform(seed1, seed2, z_rand);
      z_rand_num := integer(z_rand*z_range);
      uniform(seed1, seed2, y_rand);
      y_rand_num := integer(y_rand*y_range);
      uniform(seed1, seed2, x_rand);
      x_rand_num := integer(x_rand*x_range);
      z_prob_max := 0;
      for i in layer_prob'range loop
        z_prob_min    := z_prob_max;
        z_prob_max    := z_prob_min+layer_prob(i);
        if z_rand_num <= z_prob_max and z_rand_num >= z_prob_min then
          dest_addr.z_dest <= std_logic_vector(to_unsigned(i, positive(ceil(log2(real(max_z_dim))))));
          dest_addr.y_dest <= std_logic_vector(to_unsigned(y_rand_num, positive(ceil(log2(real(max_y_dim))))));
          dest_addr.x_dest <= std_logic_vector(to_unsigned(x_rand_num, positive(ceil(log2(real(max_x_dim))))));
        end if;
      end loop;  -- i
    end if;
  end process;
end str;

------------------------------------------------------------------------------------------

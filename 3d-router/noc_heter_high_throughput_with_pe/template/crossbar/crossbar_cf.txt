-------------------------------------------------------------------------------
-- Title      : Crossbar for high throughput router (based on "DXYU" routing) in middle layer (UP and DOWN exist)
-- Project    : 
-------------------------------------------------------------------------------
-- File       : crossbar_cf.vhd
-- Author     : Behnam Razi  <s_ids103@item0109.item.uni-bremen.de>
-- Company    : 
-- Created    : 2019-04-24
-- Last update: 2019-04-29
-- Platform   : 
-- Standard   : VHDL'93/02
-------------------------------------------------------------------------------
-- Description: 
-------------------------------------------------------------------------------
-- Copyright (c) 2019 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2019-04-24  1.0      behnam  Created
-------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.math_real.all;
use ieee.numeric_std.all;
use work.NOC_3D_PACKAGE.all;
use work.TURNS_3D_NOC.all;
------------------------------------------------------------------------------------------

entity crossbar_cf is

  generic (
    cf         : positive    := $cf;
    port_num   : positive    := $max_port_num;
    port_exist : integer_vec := $max_port_exist;
    rout_algo  : string      := $rout_algo
    );

  port (
    crossbar_in   : in  std_logic_vector((3*cf+port_num-3)*flit_size-1 downto 0);  -- 3
                                                                                   -- ports
                                                                                   -- have
                                                                                   -- cf
                                                                                   -- size
    crossbar_ctrl : in  std_logic_vector(port_num*bit_width(port_num-1)-1 downto 0);
    crossbar_out  : out std_logic_vector((3*cf+port_num-3)*flit_size-1 downto 0)
    );
end entity crossbar_cf;

architecture rtl of crossbar_cf is
------------------------------------------------------------------------------------------
-- Constant declarations
------------------------------------------------------------------------------------------
  constant local_index        : natural       := ret_index( port_exist, int_local);
  constant down_index	      : natural	      := ret_index( port_exist, int_down);
  constant up_index	      : natural       := ret_index( port_exist, int_up);
  constant port_sel_width     : positive      := bit_width(port_num-1);  -- bits for
                                                                         -- crossbar_ctrl signal of
                                                                         -- one output port
  constant local_lb           : natural       := 0;
  constant local_ub           : natural       := cf*flit_size-1;
  constant up_lb              : natural       := local_ub+1+(port_num-3)*flit_size;
  constant up_ub              : natural       := up_lb+(cf*flit_size)-1;
  constant down_lb            : natural       := up_ub+1;
  constant down_ub            : natural       := down_lb+(cf*flit_size)-1;
  constant cf_size            : natural       := cf*flit_size;
  constant sel_width          : natural       := bit_width(port_num-1);
  ----------------------------------------------------------------------------------------
  -- Type definition
  ----------------------------------------------------------------------------------------
--  type     multiplexer_input_type is array (port_num-2 downto 0)
--    of flit_vector(port_num-3 downto 0);
  ----------------------------------------------------------------------------------------
  -- Internal signal declarations
  ----------------------------------------------------------------------------------------
--  signal multiplexer_input : multiplexer_input_type;
  signal   local_in_long      : std_logic_vector((cf-1)*flit_size-1 downto 0);
  signal   local_out_long     : std_logic_vector((cf-1)*flit_size-1 downto 0);
  signal   up_in_long         : std_logic_vector((cf-1)*flit_size-1 downto 0);
  signal   up_out_long        : std_logic_vector((cf-1)*flit_size-1 downto 0);
  signal   down_in_long       : std_logic_vector((cf-1)*flit_size-1 downto 0);
  signal   down_out_long      : std_logic_vector((cf-1)*flit_size-1 downto 0);
--  signal   extend_to_cf       : std_logic_vector((cf-1)*flit_size-1 downto 0);
  signal   crossbar_short_in  : flit_vector(port_num-1 downto 0);
  signal   crossbar_short_out : flit_vector(port_num-1 downto 0);
  signal   sel_local          : std_logic_vector(sel_width-1 downto 0);
  signal   sel_up             : std_logic_vector(sel_width-1 downto 0);
  signal   sel_down           : std_logic_vector(sel_width-1 downto 0);
  ----------------------------------------------------------------------------------------
  -- Component declarations
  ----------------------------------------------------------------------------------------

begin  -- rtl
--  extend_to_cf                 <= (others => '0');
  local_in_long                <= crossbar_in(local_ub downto flit_size+local_lb);
  down_in_long                 <= crossbar_in(down_ub downto flit_size+down_lb);
  up_in_long                   <= crossbar_in(up_ub downto flit_size+up_lb);
  sel_local                    <= crossbar_ctrl(sel_width-1 downto 0);
  sel_up                       <= crossbar_ctrl((port_num-1)*sel_width-1 downto (port_num-2)*sel_width);
  sel_down                     <= crossbar_ctrl(port_num*sel_width-1 downto (port_num-1)*sel_width);
  ----------------------------------------------------------------------------------------
  -- Crossbar short input assignment (first flits of local, up and down ports
  ----------------------------------------------------------------------------------------
  crossbar_short_in(int_local) <= crossbar_in(flit_size-1 downto 0);
  crossbar_short_in_gen : for i in 1 to port_num-3 generate
    crossbar_short_in(i) <= crossbar_in((i*flit_size)+local_ub downto (i-1)*flit_size+local_ub+1);
  end generate crossbar_short_in_gen;
  crossbar_short_in(port_num-2) <= crossbar_in(up_lb+flit_size-1 downto up_lb);
  crossbar_short_in(port_num-1) <= crossbar_in(down_lb+flit_size-1 downto down_lb);
  ----------------------------------------------------------------------------------------
  -- Component instantiations
  ----------------------------------------------------------------------------------------
  short_crossbar_gen : entity work.crossbar
    generic map (
      port_num   => port_num,
      port_exist => port_exist,
      rout_algo  => rout_algo)
    port map (
      crossbar_in   => crossbar_short_in,
      crossbar_ctrl => crossbar_ctrl,
      crossbar_out  => crossbar_short_out);
------------------------------------------------------------------------------------------
-- Local_long_out generating
------------------------------------------------------------------------------------------
  LOCAL_LONG_PROC: process(sel_local, up_in_long, down_in_long)
    variable var_in: natural;
    begin
      var_in := local_index+to_integer(unsigned(sel_local))+1;
      if var_in > port_num-1 then
	var_in := var_in - port_num;
      end if;
      if var_in = up_index then
	local_out_long <= up_in_long;
      elsif var_in = down_index then
	local_out_long <= down_in_long;
      else
	local_out_long <= (others=>'-');
      end if;
    end process;
------------------------------------------------------------------------------------------
-- Down_long_out generating
------------------------------------------------------------------------------------------
  DOWN_LONG_PROC: process(sel_down, up_in_long, local_in_long)
    variable var_in: natural;
    begin
      var_in := down_index+to_integer(unsigned(sel_down))+1;
      if var_in > port_num-1 then
	var_in := var_in - port_num;
      end if;
      if var_in = up_index then
	down_out_long <= up_in_long;
      elsif var_in = down_index then
	down_out_long <= local_in_long;
      else
	down_out_long <= (others=>'-');
      end if;
    end process;
------------------------------------------------------------------------------------------
-- Up_long_out generating
------------------------------------------------------------------------------------------
  UP_LONG_PROC: process(sel_up, down_in_long, local_in_long)
    variable var_in: natural;
    begin
      var_in := up_index+to_integer(unsigned(sel_up))+1;
      if var_in > port_num-1 then
	var_in := var_in - port_num;
      end if;
      if var_in = local_index then
	up_out_long <= local_in_long;
      elsif var_in = down_index then
	up_out_long <= down_in_long;
      else
	up_out_long <= (others=>'-');
      end if;
    end process; 
--  local_out_long <= up_in_long when (local_index+to_integer(unsigned(sel_local))+1) mod port_num = up_index else
--                    down_in_long when (local_index+to_integer(unsigned(sel_local))+1) mod port_num = down_index else
--                    (others => '-');
--  down_out_long <= up_in_long when (down_index+to_integer(unsigned(sel_down))+1) mod port_num = up_index else
--                   local_in_long when (down_index+to_integer(unsigned(sel_down))+1) mod port_num = local_index else
--                   (others => '-');
--  up_out_long <= down_in_long when (up_index+to_integer(unsigned(sel_up))+1) mod port_num = down_index else
--                 local_in_long when (up_index+to_integer(unsigned(sel_up))+1) mod port_num = local_index else
--                 (others => '-');
  ----------------------------------------------------------------------------------------
  -- Assign signals to output ports
  ----------------------------------------------------------------------------------------
  crossbar_out (local_ub downto local_lb) <= local_out_long&crossbar_short_out(local_index);
  crossbar_out_gen : for i in 1 to port_num-3 generate
    crossbar_out((i*flit_size)+local_ub downto (i-1)*flit_size+local_ub+1) <= crossbar_short_out(i);
  end generate crossbar_out_gen;
  crossbar_out (up_ub downto up_lb)     <= up_out_long&crossbar_short_out(up_index);
  crossbar_out (down_ub downto down_lb) <= down_out_long&crossbar_short_out(down_index);
end rtl;

------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- Title      : Slow router with high throughput up and down ports when both
-- up and down layers are fast
-- Project    : 
-------------------------------------------------------------------------------
-- File       : router_slow_full.vhd
-- Author     : Behnam Razi Perjikolaei <raziperj@uni-bremen.de>
-- Company    : 
-- Created    : 2019-05-21
-- Last update: 2019-05-28
-- Platform   : 
-- Standard   : VHDL'87
-------------------------------------------------------------------------------
-- Description: 
-------------------------------------------------------------------------------
-- Copyright (c) 2019 
-------------------------------------------------------------------------------
-- Revisions  :
-- Date        Version  Author  Description
-- 2019-05-21  1.0      behnam  Created
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use IEEE.STD_LOGIC_MISC.all;
use work.NOC_3D_PACKAGE.all;
------------------------------------------------------------------------------------------

entity router_slow_full is

  generic (
    cf_vec                       : integer_vec       := $cf_vec;
    port_num                     : integer           := $max_port_num;
    Xis                          : natural           := 1;
    Yis                          : natural           := 1;
    Zis                          : natural           := 1;
    header_incl_in_packet_length : boolean           := true;
    -- integer vector of range "0 to port_num-1"
    port_exist                   : integer_vec       := $max_port_exist;
    vc_num_vec                   : integer_vec       := $max_vc_num_vec;
    vc_num_out_vec               : integer_vec       := $max_vc_num_out_vec;
    -- integer vector of range "0 to port_num-1, 0 to max_vc_num-1"                                   
    vc_depth_array               : vc_prop_int_array := $vc_depth_array;
    vc_depth_out_array           : vc_prop_int_array := $vc_depth_out_array;
    rout_algo                    : string            := $rout_algo
    );

  port (
    -- Inputs
    clk, fclk, rst     : in  std_logic;
    data_rx            : in  std_logic_vector((2*cf_vec(Zis)+cf_vec(Zis-1)+port_num-3)*flit_size-1 downto 0);
    vc_write_rx_vec    : in  std_logic_vector(int_vec_sum(vc_num_vec)-1 downto 0);
    incr_rx_vec        : in  std_logic_vector(int_vec_sum(vc_num_out_vec)-1 downto 0);
                                        -- Outputs
    data_tx_pl         : out std_logic_vector((2*cf_vec(Zis)+cf_vec(Zis-1)+port_num-3)*flit_size-1 downto 0);
    vc_write_tx_pl_vec : out std_logic_vector(int_vec_sum(vc_num_out_vec)-1 downto 0);
    incr_tx_pl_vec     : out std_logic_vector(int_vec_sum(vc_num_vec)-1 downto 0));
end router_slow_full;

architecture rtl of router_slow_full is

  constant cf_slow : natural := cf_vec(Zis);
  constant cf_fast : natural := cf_vec(Zis-1);

begin

------------------------------------------------------------------------------------------
-- If cf of top layer and the layer under it are equal, there is no need for shift_in_reg
-- and shift_out_mux and send_incr_fast_to_slow components. Just Up, Local and Down ports
-- have cf*N size to support high throughput communications
------------------------------------------------------------------------------------------
  ROUTER_SLOW_FULL_GEN : if cf_slow = cf_fast generate
    ROUTER_CF_GEN : entity work.router_cf_full
      generic map (
        cf                           => cf_vec(Zis),
        port_num                     => port_num,
        Xis                          => Xis,
        Yis                          => Yis,
        Zis                          => Zis,
        header_incl_in_packet_length => header_incl_in_packet_length,
        port_exist                   => port_exist,
        vc_num_vec                   => vc_num_vec,
        vc_num_out_vec               => vc_num_out_vec,
        vc_depth_array               => vc_depth_array,
        vc_depth_out_array           => vc_depth_out_array,
        rout_algo                    => rout_algo)
      port map (
        clk                => clk,
        rst                => rst,
        data_rx            => data_rx,
        vc_write_rx_vec    => vc_write_rx_vec,
        incr_rx_vec        => incr_rx_vec,
        data_tx_pl         => data_tx_pl,
        vc_write_tx_pl_vec => vc_write_tx_pl_vec,
        incr_tx_pl_vec     => incr_tx_pl_vec);
  end generate ROUTER_SLOW_FULL_GEN;
------------------------------------------------------------------------------------------
-- If cf of top layer and the layer under it are not euqal, then, shift_in_reg and
-- shift_out_mux and send_incr_fast_to_slow components must be included for down port
------------------------------------------------------------------------------------------
  ROUTER_SLOW_FULL_WITH_SHIFT_IN_GEN : if cf_slow /= cf_fast generate
    ROUTER_SHIFT_IN_GEN : entity work.router_slow_down_full
      generic map (
        cf_vec                       => cf_vec,
        port_num                     => port_num,
        Xis                          => Xis,
        Yis                          => Yis,
        Zis                          => Zis,
        header_incl_in_packet_length => header_incl_in_packet_length,
        port_exist                   => port_exist,
        vc_num_vec                   => vc_num_vec,
        vc_num_out_vec               => vc_num_out_vec,
        vc_depth_array               => vc_depth_array,
        vc_depth_out_array           => vc_depth_out_array,
        rout_algo                    => rout_algo)
      port map (
        clk                => clk,
        fclk               => fclk,
        rst                => rst,
        data_rx            => data_rx,
        vc_write_rx_vec    => vc_write_rx_vec,
        incr_rx_vec        => incr_rx_vec,
        data_tx_pl         => data_tx_pl,
        vc_write_tx_pl_vec => vc_write_tx_pl_vec,
        incr_tx_pl_vec     => incr_tx_pl_vec);
  end generate ROUTER_SLOW_FULL_WITH_SHIFT_IN_GEN;

end rtl;

